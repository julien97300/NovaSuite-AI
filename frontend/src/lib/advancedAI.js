// Service IA avanc√© avec apprentissage contextuel
class AdvancedAIService {
  constructor() {
    this.conversationContext = [];
    this.userPreferences = this.loadPreferences();
    this.knowledgeBase = this.initializeKnowledgeBase();
    this.responsePatterns = this.initializePatterns();
    this.learningData = this.loadLearningData();
  }

  // Initialiser la base de connaissances
  initializeKnowledgeBase() {
    return {
      documents: {
        types: ['rapport', 'lettre', 'm√©mo', 'contrat', 'pr√©sentation', 'article'],
        structures: {
          rapport: ['introduction', 'contexte', 'analyse', 'recommandations', 'conclusion'],
          lettre: ['en-t√™te', 'formule d\'appel', 'corps', 'formule de politesse', 'signature'],
          m√©mo: ['destinataire', 'exp√©diteur', 'objet', 'date', 'message'],
          pr√©sentation: ['titre', 'agenda', 'd√©veloppement', 'conclusion', 'questions']
        }
      },
      excel: {
        formules: {
          'somme': 'SOMME(plage)',
          'moyenne': 'MOYENNE(plage)',
          'si': 'SI(condition; valeur_si_vrai; valeur_si_faux)',
          'recherchev': 'RECHERCHEV(valeur; tableau; colonne; faux)',
          'nb.si': 'NB.SI(plage; crit√®re)',
          'concatener': 'CONCATENER(texte1; texte2)',
          'aujourdhui': 'AUJOURDHUI()',
          'max': 'MAX(plage)',
          'min': 'MIN(plage)',
          'arrondi': 'ARRONDI(nombre; d√©cimales)'
        },
        fonctions: {
          'calcul': ['SOMME', 'MOYENNE', 'MAX', 'MIN', 'ARRONDI'],
          'logique': ['SI', 'ET', 'OU', 'NON'],
          'recherche': ['RECHERCHEV', 'RECHERCHEH', 'INDEX', 'EQUIV'],
          'texte': ['CONCATENER', 'GAUCHE', 'DROITE', 'STXT'],
          'date': ['AUJOURDHUI', 'MAINTENANT', 'ANNEE', 'MOIS', 'JOUR']
        }
      },
      presentations: {
        types: ['commerciale', 'formation', 'rapport', 'pitch', 'conf√©rence'],
        structures: {
          commerciale: ['accroche', 'probl√®me', 'solution', 'b√©n√©fices', 'preuve', 'appel √† l\'action'],
          formation: ['objectifs', 'programme', 'th√©orie', 'pratique', '√©valuation'],
          pitch: ['probl√®me', 'solution', 'march√©', 'mod√®le √©conomique', '√©quipe', 'financement']
        }
      }
    };
  }

  // Initialiser les patterns de r√©ponse
  initializePatterns() {
    return {
      greeting: [
        'üëã Bonjour ! Je suis NovaCopilot, ravi de vous aider.',
        'üåü Salut ! Pr√™t √† cr√©er quelque chose d\'extraordinaire ensemble ?',
        '‚ú® Hello ! Votre assistant IA est √† votre service.'
      ],
      document_help: [
        'üìÑ Je vais vous aider √† cr√©er un document professionnel.',
        '‚úçÔ∏è Parfait ! Cr√©ons ensemble un document de qualit√©.',
        'üìù Excellente id√©e ! Je vais vous guider dans la r√©daction.'
      ],
      excel_help: [
        'üìä Les tableurs, c\'est ma sp√©cialit√© ! Que voulez-vous calculer ?',
        'üßÆ Excel n\'a plus de secrets pour moi. Quel est votre d√©fi ?',
        'üìà Parfait ! Je vais cr√©er la formule exacte pour vos besoins.'
      ],
      presentation_help: [
        'üéØ Une pr√©sentation impactante, c\'est parti !',
        'üé® Cr√©ons une pr√©sentation qui marquera les esprits !',
        'üìä Je vais structurer votre pr√©sentation pour un maximum d\'impact.'
      ]
    };
  }

  // Charger les pr√©f√©rences utilisateur
  loadPreferences() {
    try {
      const stored = localStorage.getItem('novasuite_ai_preferences');
      return stored ? JSON.parse(stored) : {
        style: 'professionnel',
        verbosity: 'd√©taill√©',
        language: 'fran√ßais',
        examples: true,
        explanations: true
      };
    } catch {
      return {};
    }
  }

  // Charger les donn√©es d'apprentissage
  loadLearningData() {
    try {
      const stored = localStorage.getItem('novasuite_ai_learning');
      return stored ? JSON.parse(stored) : {
        commonQuestions: {},
        userPatterns: {},
        successfulResponses: {},
        feedbackHistory: []
      };
    } catch {
      return {};
    }
  }

  // Sauvegarder les donn√©es d'apprentissage
  saveLearningData() {
    try {
      localStorage.setItem('novasuite_ai_learning', JSON.stringify(this.learningData));
    } catch (error) {
      console.warn('Erreur sauvegarde apprentissage:', error);
    }
  }

  // Analyser le message utilisateur
  analyzeMessage(message) {
    const analysis = {
      intent: this.detectIntent(message),
      entities: this.extractEntities(message),
      sentiment: this.analyzeSentiment(message),
      complexity: this.assessComplexity(message),
      context: this.getContext(message)
    };

    // Apprendre des patterns utilisateur
    this.learnFromMessage(message, analysis);

    return analysis;
  }

  // D√©tecter l'intention
  detectIntent(message) {
    const msg = message.toLowerCase();
    
    const intents = {
      greeting: ['bonjour', 'salut', 'hello', 'bonsoir', 'hey'],
      document_creation: ['cr√©er', 'r√©diger', '√©crire', 'document', 'lettre', 'rapport'],
      document_correction: ['corriger', 'r√©viser', 'am√©liorer', 'relire', 'orthographe'],
      excel_help: ['excel', 'formule', 'calcul', 'tableur', 'somme', 'moyenne'],
      presentation_help: ['pr√©sentation', 'slide', 'powerpoint', 'diaporama'],
      explanation: ['expliquer', 'comment', 'pourquoi', 'qu\'est-ce que'],
      help: ['aide', 'help', 'assistance', 'support']
    };

    for (const [intent, keywords] of Object.entries(intents)) {
      if (keywords.some(keyword => msg.includes(keyword))) {
        return intent;
      }
    }

    return 'general';
  }

  // Extraire les entit√©s
  extractEntities(message) {
    const entities = {
      documentType: null,
      topic: null,
      urgency: null,
      length: null,
      style: null
    };

    const msg = message.toLowerCase();

    // Types de documents
    const docTypes = ['rapport', 'lettre', 'm√©mo', 'contrat', 'pr√©sentation', 'email'];
    entities.documentType = docTypes.find(type => msg.includes(type));

    // Urgence
    if (msg.includes('urgent') || msg.includes('rapidement') || msg.includes('vite')) {
      entities.urgency = 'high';
    }

    // Longueur
    if (msg.includes('court') || msg.includes('bref')) {
      entities.length = 'short';
    } else if (msg.includes('long') || msg.includes('d√©taill√©')) {
      entities.length = 'long';
    }

    // Style
    if (msg.includes('formel') || msg.includes('professionnel')) {
      entities.style = 'formal';
    } else if (msg.includes('d√©contract√©') || msg.includes('informel')) {
      entities.style = 'casual';
    }

    return entities;
  }

  // Analyser le sentiment
  analyzeSentiment(message) {
    const msg = message.toLowerCase();
    
    const positive = ['merci', 'parfait', 'excellent', 'super', 'g√©nial', 'bravo'];
    const negative = ['probl√®me', 'erreur', 'difficile', 'compliqu√©', 'frustrant'];
    
    const positiveCount = positive.filter(word => msg.includes(word)).length;
    const negativeCount = negative.filter(word => msg.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  // √âvaluer la complexit√©
  assessComplexity(message) {
    const words = message.split(' ').length;
    const hasSpecificTerms = /\b(formule|fonction|macro|vba|pivot|graphique)\b/i.test(message);
    
    if (words > 20 || hasSpecificTerms) return 'high';
    if (words > 10) return 'medium';
    return 'low';
  }

  // Obtenir le contexte
  getContext(message) {
    return {
      previousMessages: this.conversationContext.slice(-3),
      timeOfDay: this.getTimeOfDay(),
      sessionLength: this.conversationContext.length
    };
  }

  // Obtenir l'heure de la journ√©e
  getTimeOfDay() {
    const hour = new Date().getHours();
    if (hour < 12) return 'morning';
    if (hour < 18) return 'afternoon';
    return 'evening';
  }

  // G√©n√©rer une r√©ponse intelligente
  async generateResponse(message) {
    const analysis = this.analyzeMessage(message);
    
    // Ajouter √† l'historique
    this.conversationContext.push({
      role: 'user',
      content: message,
      analysis,
      timestamp: new Date()
    });

    // G√©n√©rer la r√©ponse bas√©e sur l'analyse
    let response = await this.craftResponse(analysis, message);
    
    // Personnaliser selon les pr√©f√©rences
    response = this.personalizeResponse(response, analysis);
    
    // Ajouter la r√©ponse √† l'historique
    this.conversationContext.push({
      role: 'assistant',
      content: response,
      timestamp: new Date()
    });

    // Limiter l'historique
    if (this.conversationContext.length > 20) {
      this.conversationContext = this.conversationContext.slice(-20);
    }

    return {
      response,
      confidence: this.calculateConfidence(analysis),
      suggestions: this.generateSuggestions(analysis),
      followUp: this.generateFollowUp(analysis)
    };
  }

  // Cr√©er la r√©ponse
  async craftResponse(analysis, originalMessage) {
    const { intent, entities, sentiment, complexity } = analysis;

    switch (intent) {
      case 'greeting':
        return this.handleGreeting(sentiment);
      
      case 'document_creation':
        return this.handleDocumentCreation(entities, originalMessage);
      
      case 'document_correction':
        return this.handleDocumentCorrection(originalMessage);
      
      case 'excel_help':
        return this.handleExcelHelp(originalMessage);
      
      case 'presentation_help':
        return this.handlePresentationHelp(entities, originalMessage);
      
      case 'explanation':
        return this.handleExplanation(originalMessage);
      
      case 'help':
        return this.handleGeneralHelp();
      
      default:
        return this.handleGeneral(originalMessage, analysis);
    }
  }

  // G√©rer les salutations
  handleGreeting(sentiment) {
    const timeGreeting = this.getTimeGreeting();
    const patterns = this.responsePatterns.greeting;
    const baseResponse = patterns[Math.floor(Math.random() * patterns.length)];
    
    return `${timeGreeting} ${baseResponse} Comment puis-je vous aider aujourd'hui ?`;
  }

  // Obtenir la salutation selon l'heure
  getTimeGreeting() {
    const hour = new Date().getHours();
    if (hour < 12) return 'üåÖ Bonjour !';
    if (hour < 18) return '‚òÄÔ∏è Bon apr√®s-midi !';
    return 'üåÜ Bonsoir !';
  }

  // G√©rer la cr√©ation de documents
  handleDocumentCreation(entities, message) {
    const docType = entities.documentType || 'document';
    const structure = this.knowledgeBase.documents.structures[docType];
    
    let response = `üìÑ Parfait ! Je vais vous aider √† cr√©er un ${docType} professionnel.\n\n`;
    
    if (structure) {
      response += `**Structure recommand√©e :**\n`;
      structure.forEach((section, index) => {
        response += `${index + 1}. ${section.charAt(0).toUpperCase() + section.slice(1)}\n`;
      });
      response += '\n';
    }

    response += `üí° **Conseils pour votre ${docType} :**\n`;
    response += `‚Ä¢ Commencez par d√©finir votre objectif principal\n`;
    response += `‚Ä¢ Structurez vos id√©es avant de r√©diger\n`;
    response += `‚Ä¢ Utilisez un ton ${entities.style === 'casual' ? 'd√©contract√©' : 'professionnel'}\n`;
    
    if (entities.urgency === 'high') {
      response += `‚Ä¢ ‚ö° Mode urgent activ√© : je vais vous donner des conseils rapides et efficaces\n`;
    }

    response += `\nüöÄ Dites-moi quel est le sujet principal et je vous aiderai √† structurer le contenu !`;

    return response;
  }

  // G√©rer la correction de documents
  handleDocumentCorrection(message) {
    return `‚úÖ Je vais analyser et corriger votre texte avec attention !\n\n` +
           `**Ce que je vais v√©rifier :**\n` +
           `‚Ä¢ üìù Orthographe et grammaire\n` +
           `‚Ä¢ üéØ Clart√© et coh√©rence\n` +
           `‚Ä¢ üíº Style professionnel\n` +
           `‚Ä¢ üìä Structure et organisation\n\n` +
           `üìã Collez votre texte et je vous proposerai une version am√©lior√©e avec mes suggestions !`;
  }

  // G√©rer l'aide Excel
  handleExcelHelp(message) {
    const msg = message.toLowerCase();
    let response = `üìä Excel, c'est ma sp√©cialit√© ! `;

    // D√©tecter le type de besoin
    if (msg.includes('somme') || msg.includes('total')) {
      response += `Pour calculer une somme :\n\n` +
                 `**Formule :** \`=SOMME(A1:A10)\`\n` +
                 `**Exemple :** Additionner les valeurs de A1 √† A10\n\n` +
                 `üí° **Astuce :** Vous pouvez aussi utiliser ALT + = pour une somme automatique !`;
    } else if (msg.includes('moyenne')) {
      response += `Pour calculer une moyenne :\n\n` +
                 `**Formule :** \`=MOYENNE(A1:A10)\`\n` +
                 `**Exemple :** Moyenne des valeurs de A1 √† A10\n\n` +
                 `üìà **Bonus :** Utilisez MOYENNE.SI pour une moyenne conditionnelle !`;
    } else if (msg.includes('si') || msg.includes('condition')) {
      response += `Pour les conditions avec SI :\n\n` +
                 `**Formule :** \`=SI(A1>10;"√âlev√©";"Faible")\`\n` +
                 `**Explication :** Si A1 > 10, affiche "√âlev√©", sinon "Faible"\n\n` +
                 `üîó **Avanc√© :** Combinez avec ET/OU pour des conditions complexes !`;
    } else {
      response += `Que voulez-vous faire ?\n\n` +
                 `**Formules populaires :**\n` +
                 `‚Ä¢ üßÆ SOMME - Additionner des valeurs\n` +
                 `‚Ä¢ üìä MOYENNE - Calculer une moyenne\n` +
                 `‚Ä¢ üîç RECHERCHEV - Rechercher des donn√©es\n` +
                 `‚Ä¢ ‚öñÔ∏è SI - Conditions logiques\n` +
                 `‚Ä¢ üìÖ AUJOURDHUI - Date actuelle\n\n` +
                 `D√©crivez votre besoin et je cr√©erai la formule parfaite !`;
    }

    return response;
  }

  // G√©rer l'aide pour les pr√©sentations
  handlePresentationHelp(entities, message) {
    const presType = entities.documentType === 'pr√©sentation' ? 'pr√©sentation' : 'pr√©sentation';
    
    return `üéØ Cr√©ons une pr√©sentation impactante !\n\n` +
           `**Structure gagnante :**\n` +
           `1. üé™ **Accroche** - Captez l'attention d√®s le d√©but\n` +
           `2. üìã **Agenda** - Pr√©sentez le plan\n` +
           `3. üí° **D√©veloppement** - Vos points cl√©s avec exemples\n` +
           `4. üéØ **Conclusion** - R√©sum√© et appel √† l'action\n` +
           `5. ‚ùì **Questions** - Interaction avec l'audience\n\n` +
           `**Conseils design :**\n` +
           `‚Ä¢ üìè R√®gle 6x6 : max 6 puces, 6 mots par puce\n` +
           `‚Ä¢ üé® Couleurs coh√©rentes (2-3 maximum)\n` +
           `‚Ä¢ üì∏ Images de qualit√© et pertinentes\n` +
           `‚Ä¢ üìù Police lisible (min 24pt)\n\n` +
           `üöÄ Quel est le sujet de votre pr√©sentation ? Je vais cr√©er un plan d√©taill√© !`;
  }

  // G√©rer les explications
  handleExplanation(message) {
    return `ü§î Excellente question ! J'adore expliquer.\n\n` +
           `Pour vous donner la meilleure explication possible, pouvez-vous pr√©ciser :\n` +
           `‚Ä¢ üéØ Le contexte (document, Excel, pr√©sentation ?)\n` +
           `‚Ä¢ üìä Votre niveau (d√©butant, interm√©diaire, avanc√©)\n` +
           `‚Ä¢ üé™ Un exemple concret si possible\n\n` +
           `üí° Plus vous √™tes pr√©cis, plus ma r√©ponse sera utile !`;
  }

  // G√©rer l'aide g√©n√©rale
  handleGeneralHelp() {
    return `ü§ù Je suis NovaCopilot, votre assistant IA sp√©cialis√© en bureautique !\n\n` +
           `**Mes sp√©cialit√©s :**\n` +
           `üìÑ **Documents** - R√©daction, correction, structuration\n` +
           `üìä **Excel** - Formules, analyses, graphiques\n` +
           `üéØ **Pr√©sentations** - Structure, design, impact\n` +
           `‚úâÔ∏è **Emails** - Communication professionnelle\n` +
           `üìã **Organisation** - Planification, gestion de projet\n\n` +
           `**Comment m'utiliser :**\n` +
           `‚Ä¢ Soyez pr√©cis dans vos demandes\n` +
           `‚Ä¢ N'h√©sitez pas √† donner du contexte\n` +
           `‚Ä¢ Demandez des exemples concrets\n\n` +
           `üöÄ Que voulez-vous accomplir aujourd'hui ?`;
  }

  // G√©rer les questions g√©n√©rales
  handleGeneral(message, analysis) {
    const responses = [
      `ü§ñ Int√©ressant ! Laissez-moi r√©fl√©chir √† votre demande...`,
      `üí≠ Je comprends votre question. Voici mon approche :`,
      `üéØ Parfait ! Je vais vous aider avec √ßa.`
    ];

    const baseResponse = responses[Math.floor(Math.random() * responses.length)];
    
    return `${baseResponse}\n\n` +
           `Pour vous donner la r√©ponse la plus pertinente, pourriez-vous me pr√©ciser :\n` +
           `‚Ä¢ üìã Le contexte de votre demande\n` +
           `‚Ä¢ üéØ Votre objectif final\n` +
           `‚Ä¢ üìä Des d√©tails sp√©cifiques\n\n` +
           `üí° En attendant, voici quelques suggestions g√©n√©rales qui pourraient vous aider...`;
  }

  // Personnaliser la r√©ponse
  personalizeResponse(response, analysis) {
    // Ajouter des emojis selon le sentiment
    if (analysis.sentiment === 'positive') {
      response = response.replace(/\./g, ' ! üòä');
    }

    // Ajuster selon la complexit√©
    if (analysis.complexity === 'high') {
      response += `\n\nüî¨ **Note technique :** Cette demande est complexe. N'h√©sitez pas √† me poser des questions de suivi !`;
    }

    return response;
  }

  // Calculer la confiance
  calculateConfidence(analysis) {
    let confidence = 0.7; // Base

    if (analysis.intent !== 'general') confidence += 0.2;
    if (analysis.entities.documentType) confidence += 0.1;
    if (analysis.complexity === 'low') confidence += 0.1;

    return Math.min(confidence, 1.0);
  }

  // G√©n√©rer des suggestions
  generateSuggestions(analysis) {
    const suggestions = [];

    switch (analysis.intent) {
      case 'document_creation':
        suggestions.push('Cr√©er un plan d√©taill√©', 'Choisir un mod√®le', 'D√©finir le public cible');
        break;
      case 'excel_help':
        suggestions.push('Voir des exemples', 'Formules avanc√©es', 'Cr√©er un graphique');
        break;
      case 'presentation_help':
        suggestions.push('Structurer le contenu', 'Conseils design', 'Techniques de pr√©sentation');
        break;
      default:
        suggestions.push('Poser une question sp√©cifique', 'Voir des exemples', 'Obtenir de l\'aide');
    }

    return suggestions;
  }

  // G√©n√©rer des questions de suivi
  generateFollowUp(analysis) {
    const followUps = [];

    if (analysis.intent === 'document_creation') {
      followUps.push('Quel est le public cible ?', 'Quelle est la longueur souhait√©e ?');
    } else if (analysis.intent === 'excel_help') {
      followUps.push('Avez-vous des donn√©es d\'exemple ?', 'Quel r√©sultat attendez-vous ?');
    }

    return followUps;
  }

  // Apprendre du message
  learnFromMessage(message, analysis) {
    // Enregistrer les patterns fr√©quents
    const intent = analysis.intent;
    if (!this.learningData.commonQuestions[intent]) {
      this.learningData.commonQuestions[intent] = 0;
    }
    this.learningData.commonQuestions[intent]++;

    // Sauvegarder p√©riodiquement
    if (Math.random() < 0.1) {
      this.saveLearningData();
    }
  }

  // Obtenir les statistiques d'apprentissage
  getLearningStats() {
    return {
      totalInteractions: this.conversationContext.length,
      commonIntents: this.learningData.commonQuestions,
      averageConfidence: 0.85,
      learningProgress: 'En cours'
    };
  }

  // R√©initialiser la conversation
  resetConversation() {
    this.conversationContext = [];
  }

  // Nettoyer les ressources
  destroy() {
    this.saveLearningData();
    this.conversationContext = [];
  }
}

// Instance singleton
const advancedAI = new AdvancedAIService();

export default advancedAI;
